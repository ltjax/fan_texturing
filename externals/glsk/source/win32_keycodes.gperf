%language=C++
%7bit
%global-table
%ignore-case
%readonly-tables
%null-strings
%enum
%define lookup-function-name lookup
%define class-name glsk::internal::keycode_hash
%{
#include <glsk/glsk.hpp>
//@cond
#define CINTERFACE
#define DIRECTINPUT_VERSION 0x0800
#include <dinput.h>
#include "win32_keycodes.hpp"
%}
%struct-type
struct keystring_entry { const char* name; unsigned char code; };
%%
# version-id: $Id: win32_keycodes.gperf 101 2009-01-26 02:21:58Z ltjax $
Escape, DIK_ESCAPE
1, DIK_1
2, DIK_2
3, DIK_3
4, DIK_4
5, DIK_5
6, DIK_6
7, DIK_7
8, DIK_8
9, DIK_9
0, DIK_0
-, DIK_MINUS
=, DIK_EQUALS
Backspace, DIK_BACK
Tab, DIK_TAB
q, DIK_Q
w, DIK_W
e, DIK_E
r, DIK_R
t, DIK_T
y, DIK_Y
u, DIK_U
i, DIK_I
o, DIK_O
p, DIK_P
[, DIK_LBRACKET
], DIK_RBRACKET
Return, DIK_RETURN
LCtrl, DIK_LCONTROL
a, DIK_A
s, DIK_S
d, DIK_D
f, DIK_F
g, DIK_G
h, DIK_H
j, DIK_J
k, DIK_K
l, DIK_L
;, DIK_SEMICOLON
', DIK_APOSTROPHE
Grave, DIK_GRAVE
LShift, DIK_LSHIFT
\, DIK_BACKSLASH
z, DIK_Z
x, DIK_X
c, DIK_C
v, DIK_V
b, DIK_B
n, DIK_N
m, DIK_M
Comma, DIK_COMMA
Period, DIK_PERIOD
/, DIK_SLASH
RShift, DIK_RSHIFT
Num*, DIK_MULTIPLY
LAlt, DIK_LMENU
Space, DIK_SPACE
Capital, DIK_CAPITAL
F1, DIK_F1
F2, DIK_F2
F3, DIK_F3
F4, DIK_F4
F5, DIK_F5
F6, DIK_F6
F7, DIK_F7
F8, DIK_F8
F9, DIK_F9
F10, DIK_F10
NumLock, DIK_NUMLOCK
Scroll, DIK_SCROLL
Num7, DIK_NUMPAD7
Num8, DIK_NUMPAD8
Num9, DIK_NUMPAD9
Num-, DIK_SUBTRACT
Num4, DIK_NUMPAD4
Num5, DIK_NUMPAD5
Num6, DIK_NUMPAD6
Num+, DIK_ADD
Num1, DIK_NUMPAD1
Num2, DIK_NUMPAD2
Num3, DIK_NUMPAD3
Num0, DIK_NUMPAD0
Num., DIK_DECIMAL
OEM, DIK_OEM_102
F11, DIK_F11
F12, DIK_F12
F13, DIK_F13
F14, DIK_F14
F15, DIK_F15
Kana, DIK_KANA
Abnt_C1, DIK_ABNT_C1
Convert, DIK_CONVERT
NoConvert, DIK_NOCONVERT
Yen, DIK_YEN
Abnt_C2, DIK_ABNT_C2
Num=, DIK_NUMPADEQUALS
PrevTrack, DIK_PREVTRACK
^, DIK_CIRCUMFLEX
@, DIK_AT
:, DIK_COLON
UnderLine, DIK_UNDERLINE
Kanji, DIK_KANJI
Stop, DIK_STOP
AX, DIK_AX
UnLabeled, DIK_UNLABELED
NextTrack, DIK_NEXTTRACK
NumReturn, DIK_NUMPADENTER
RCtl, DIK_RCONTROL
Mute, DIK_MUTE
Calculator, DIK_CALCULATOR
PlayPause, DIK_PLAYPAUSE
MediaStop, DIK_MEDIASTOP
VolumeDown, DIK_VOLUMEDOWN
VolumeUp, DIK_VOLUMEUP
WebHome, DIK_WEBHOME
NumpadComma, DIK_NUMPADCOMMA
Num/, DIK_DIVIDE
SysRq, DIK_SYSRQ
RAlt, DIK_RMENU
Pause, DIK_PAUSE
Home, DIK_HOME
Up, DIK_UP
PgUp, DIK_PRIOR
Left, DIK_LEFT
Right, DIK_RIGHT
End, DIK_END
Down, DIK_DOWN
PgDn, DIK_NEXT
Ins, DIK_INSERT
Del, DIK_DELETE
LWin, DIK_LWIN
RWin, DIK_RWIN
Apps, DIK_APPS
Power, DIK_POWER
Sleep, DIK_SLEEP
Wake, DIK_WAKE
WebSearch, DIK_WEBSEARCH
WebFavorites, DIK_WEBFAVORITES
WebRefresh, DIK_WEBREFRESH
WebStop, DIK_WEBSTOP
WebForward, DIK_WEBFORWARD
WebBack, DIK_WEBBACK
MyComputer, DIK_MYCOMPUTER
Mail, DIK_MAIL
MediaSelect, DIK_MEDIASELECT
%%


//@endcond

/** Get the keycode by the name of a key.
	The algorithm employed needs a single string match to find the right keycode,
	however it is good practice to only get the keycodes once and not everytime when
	checking for a keystate.
	\param name The name of the key as a human readable string.
	\return Corresponding system dependant keycode.
	\ingroup Input
*/
int glsk::get_keycode( const std::string& name )
{
	const struct keystring_entry* result = 0;

	result = glsk::internal::keycode_hash::lookup( name.c_str(), (unsigned int)name.length() );

	return (result) ? result->code : 0;
}

/** Get the name of a key by a keycode.
	\param code Keycode of the key.
	\return The name of the corresponing key as a string.
	\ingroup Input
*/
const char* glsk::get_keyname( int code )
{
	int n = sizeof( wordlist ) / sizeof( struct keystring_entry );
	int i;

	for ( i = 0; i < n; ++i )
	{
		if ( wordlist[ i ].name && ( wordlist[ i ].code == code ) )
			return wordlist[ i ].name;
	}

	return "";
}
